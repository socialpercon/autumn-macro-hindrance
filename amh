#!/bin/bash

# Config variables - please change if needed

## Group ID
GROUP_ID=de.uvwxy

## Base artifact id, e.g. the project
BASE_ARTIFACT_ID=demo-cluster

## Base service artifact ID
ARTIFACT_SERVICE_ID=service

## Config Server Config Repo
CONFIG_REPO_URI=https://github.com/uvwxy/amh-demo-cluster-config.git

## Spring Start Web Service
SPRING_STARTER=https://start.spring.io

if [ -e amh.conf ]; then
	# override default settings via amh.conf
	. amh.conf
fi

# Internal Vars - better don't change
AMH_VERSION=0.1.0-SNAPSHOT
AMH_BOOT_VERSION=1.4.0.RELEASE
AMH_TYPE=maven-project
AMH_APP_NAME=App

## Application properties within a project
APP_PROPS=src/main/resources/application.properties

# Helper functions

function checkCommandExists {
	if [ -z "$(which $1)" ]; then
		echo "Please install $1 first."
		exit
	fi
}

checkCommandExists mvn
checkCommandExists curl
checkCommandExists tar
checkCommandExists awk
checkCommandExists printf

function findAppJava {
	find $1 -name App.java
}

function insertLine {
	awk 'NR=='"$2"'{print "'"$3"'"}1' $1 > $1.tmp
	mv $1.tmp $1
}

function download-spring-component {
	echo "Creating $1"
	curl -s $SPRING_STARTER/starter.tgz \
		-d version=$AMH_VERSION \
		-d bootVersion=$AMH_BOOT_VERSION \
		-d groupId=$GROUP_ID \
		-d packageName=$GROUP_ID.$1 \
		-d applicationName=$AMH_APP_NAME \
		-d artifactId=$1 \
		-d name=$1 \
		-d baseDir=$1 \
		-d type=$AMH_TYPE \
		-d dependencies=$2 | tar -xzf -
}

function eureka-server {
	download-spring-component $BASE_ARTIFACT_ID-eureka-server cloud-eureka-server,cloud-config-client
	echo 'spring.application.name='"$1"'' >> $BASE_ARTIFACT_ID-eureka-server/$APP_PROPS
	APP_JAVA=$(findAppJava ./$BASE_ARTIFACT_ID-eureka-server)
	insertLine $APP_JAVA 4 "import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;"
	insertLine $APP_JAVA 8 "@EnableEurekaServer"
}

function config-server {
	download-spring-component $BASE_ARTIFACT_ID-config-server cloud-config-server
	echo 'server.port=${port:8888}' >> $BASE_ARTIFACT_ID-config-server/$APP_PROPS
	echo "spring.cloud.config.server.git.uri=$CONFIG_REPO_URI" >> $BASE_ARTIFACT_ID-config-server/$APP_PROPS
	APP_JAVA=$(findAppJava ./$BASE_ARTIFACT_ID-config-server)
	insertLine $APP_JAVA 4 "import org.springframework.cloud.config.server.EnableConfigServer;"
	insertLine $APP_JAVA 8 "@EnableConfigServer"
}

function zuul-server {
	download-spring-component $BASE_ARTIFACT_ID-zuul-server cloud-zuul,cloud-config-client,cloud-eureka
	echo 'spring.application.name='"$1"'' >> $BASE_ARTIFACT_ID-zuul-server/$APP_PROPS
	APP_JAVA=$(findAppJava ./$BASE_ARTIFACT_ID-zuul-server)
	insertLine $APP_JAVA 5 "import org.springframework.cloud.netflix.zuul.EnableZuulProxy;"
	insertLine $APP_JAVA 5 "import org.springframework.cloud.netflix.eureka.EnableEurekaClient;"
	insertLine $APP_JAVA 9 "@EnableEurekaClient"
	insertLine $APP_JAVA 9 "@EnableZuulProxy"
}

function micro-service {
	download-spring-component $BASE_ARTIFACT_ID-$ARTIFACT_SERVICE_ID-$1 cloud-eureka,cloud-config-client,cloud-ribbon
	echo "spring.application.name=$1" >> $BASE_ARTIFACT_ID-$ARTIFACT_SERVICE_ID-$1/$APP_PROPS
	APP_JAVA=$(findAppJava ./$BASE_ARTIFACT_ID-$ARTIFACT_SERVICE_ID-$1)
	insertLine $APP_JAVA 3 "import org.springframework.beans.factory.annotation.Value;"
	insertLine $APP_JAVA 5 "import org.springframework.cloud.netflix.eureka.EnableEurekaClient;"
	insertLine $APP_JAVA 5 "import org.springframework.web.bind.annotation.RestController;"
	insertLine $APP_JAVA 5 "import org.springframework.web.bind.annotation.RequestMapping;"
	insertLine $APP_JAVA 10 "@EnableEurekaClient"
	insertLine $APP_JAVA 11 "@RestController"
	insertLine $APP_JAVA 14 '    @Value(\"${info.foo}\") protected String foo;'
	insertLine $APP_JAVA 15 '    @RequestMapping(\"/api/info\") public String info(){ return \"Hello Foo \" + foo;}'
}

function forAllFolders {
	for i in $(ls); do
		if [ -d $i ]; then
			cd $i
			$@
			cd ..
		fi
	done;
}

function package {
	forAllFolders mvn clean package -DskipTests # skipping tests you know, the only mode that works ;). jk. it's faster for testing
}

function clean-demo {
	rm -rf demo-cluster-*
}

function create-demo {
	# the second parameters will be the spring.application.name
	eureka-server eureka
	config-server
	zuul-server zuul
	micro-service task1
	micro-service task2
	micro-service task3
}

$1 $2